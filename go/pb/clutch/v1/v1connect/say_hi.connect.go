// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clutch/v1/say_hi.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/vinewz/clutchRPC/go/pb/clutch/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SayHiServiceName is the fully-qualified name of the SayHiService service.
	SayHiServiceName = "clutch_rpc.v1.SayHiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SayHiServiceSayHiProcedure is the fully-qualified name of the SayHiService's SayHi RPC.
	SayHiServiceSayHiProcedure = "/clutch_rpc.v1.SayHiService/SayHi"
)

// SayHiServiceClient is a client for the clutch_rpc.v1.SayHiService service.
type SayHiServiceClient interface {
	SayHi(context.Context, *connect.Request[v1.SayHiRequest]) (*connect.Response[v1.SayHiResponse], error)
}

// NewSayHiServiceClient constructs a client for the clutch_rpc.v1.SayHiService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSayHiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SayHiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sayHiServiceMethods := v1.File_clutch_v1_say_hi_proto.Services().ByName("SayHiService").Methods()
	return &sayHiServiceClient{
		sayHi: connect.NewClient[v1.SayHiRequest, v1.SayHiResponse](
			httpClient,
			baseURL+SayHiServiceSayHiProcedure,
			connect.WithSchema(sayHiServiceMethods.ByName("SayHi")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sayHiServiceClient implements SayHiServiceClient.
type sayHiServiceClient struct {
	sayHi *connect.Client[v1.SayHiRequest, v1.SayHiResponse]
}

// SayHi calls clutch_rpc.v1.SayHiService.SayHi.
func (c *sayHiServiceClient) SayHi(ctx context.Context, req *connect.Request[v1.SayHiRequest]) (*connect.Response[v1.SayHiResponse], error) {
	return c.sayHi.CallUnary(ctx, req)
}

// SayHiServiceHandler is an implementation of the clutch_rpc.v1.SayHiService service.
type SayHiServiceHandler interface {
	SayHi(context.Context, *connect.Request[v1.SayHiRequest]) (*connect.Response[v1.SayHiResponse], error)
}

// NewSayHiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSayHiServiceHandler(svc SayHiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sayHiServiceMethods := v1.File_clutch_v1_say_hi_proto.Services().ByName("SayHiService").Methods()
	sayHiServiceSayHiHandler := connect.NewUnaryHandler(
		SayHiServiceSayHiProcedure,
		svc.SayHi,
		connect.WithSchema(sayHiServiceMethods.ByName("SayHi")),
		connect.WithHandlerOptions(opts...),
	)
	return "/clutch_rpc.v1.SayHiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SayHiServiceSayHiProcedure:
			sayHiServiceSayHiHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSayHiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSayHiServiceHandler struct{}

func (UnimplementedSayHiServiceHandler) SayHi(context.Context, *connect.Request[v1.SayHiRequest]) (*connect.Response[v1.SayHiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clutch_rpc.v1.SayHiService.SayHi is not implemented"))
}
