// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clutch/v1/use_shell.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/vinewz/clutchRPC/go/pb/clutch/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UseShellServiceName is the fully-qualified name of the UseShellService service.
	UseShellServiceName = "clutch_rpc.v1.UseShellService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UseShellServiceUseShellProcedure is the fully-qualified name of the UseShellService's UseShell
	// RPC.
	UseShellServiceUseShellProcedure = "/clutch_rpc.v1.UseShellService/UseShell"
)

// UseShellServiceClient is a client for the clutch_rpc.v1.UseShellService service.
type UseShellServiceClient interface {
	UseShell(context.Context, *connect.Request[v1.UseShellRequest]) (*connect.Response[v1.UseShellResponse], error)
}

// NewUseShellServiceClient constructs a client for the clutch_rpc.v1.UseShellService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUseShellServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UseShellServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	useShellServiceMethods := v1.File_clutch_v1_use_shell_proto.Services().ByName("UseShellService").Methods()
	return &useShellServiceClient{
		useShell: connect.NewClient[v1.UseShellRequest, v1.UseShellResponse](
			httpClient,
			baseURL+UseShellServiceUseShellProcedure,
			connect.WithSchema(useShellServiceMethods.ByName("UseShell")),
			connect.WithClientOptions(opts...),
		),
	}
}

// useShellServiceClient implements UseShellServiceClient.
type useShellServiceClient struct {
	useShell *connect.Client[v1.UseShellRequest, v1.UseShellResponse]
}

// UseShell calls clutch_rpc.v1.UseShellService.UseShell.
func (c *useShellServiceClient) UseShell(ctx context.Context, req *connect.Request[v1.UseShellRequest]) (*connect.Response[v1.UseShellResponse], error) {
	return c.useShell.CallUnary(ctx, req)
}

// UseShellServiceHandler is an implementation of the clutch_rpc.v1.UseShellService service.
type UseShellServiceHandler interface {
	UseShell(context.Context, *connect.Request[v1.UseShellRequest]) (*connect.Response[v1.UseShellResponse], error)
}

// NewUseShellServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUseShellServiceHandler(svc UseShellServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	useShellServiceMethods := v1.File_clutch_v1_use_shell_proto.Services().ByName("UseShellService").Methods()
	useShellServiceUseShellHandler := connect.NewUnaryHandler(
		UseShellServiceUseShellProcedure,
		svc.UseShell,
		connect.WithSchema(useShellServiceMethods.ByName("UseShell")),
		connect.WithHandlerOptions(opts...),
	)
	return "/clutch_rpc.v1.UseShellService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UseShellServiceUseShellProcedure:
			useShellServiceUseShellHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUseShellServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUseShellServiceHandler struct{}

func (UnimplementedUseShellServiceHandler) UseShell(context.Context, *connect.Request[v1.UseShellRequest]) (*connect.Response[v1.UseShellResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clutch_rpc.v1.UseShellService.UseShell is not implemented"))
}
